'use client';

import React, { useEffect, useState, useRef, Suspense } from "react";
import { ProgressiveMessage } from "@/types/progressive-message.types";
import { messageTransitionService } from "@/services/message-transition.service";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { RotateCcw, Play, Copy, MoreHorizontal } from "lucide-react";
import { useAppStore } from "@/store";
import { useEffectSettings } from "@/contexts/EffectSettingsContext";
import MessageEffects from "@/components/chat/MessageEffects";
import { ParticleText } from "@/components/chat/AdvancedEffects";

interface ProgressiveMessageBubbleProps {
  message: ProgressiveMessage;
  isLatest?: boolean;
}

export const ProgressiveMessageBubble: React.FC<ProgressiveMessageBubbleProps> = ({ 
  message, 
  isLatest = false 
}) => {
  const [showFullActions, setShowFullActions] = useState(false);
  const [showDiff, setShowDiff] = useState(false);
  const [showMetadata, setShowMetadata] = useState(false);
  const { is_generating } = useAppStore();
  const { settings: effectSettings } = useEffectSettings();
  const contentRef = useRef<HTMLDivElement>(null);
  const menuRef = useRef<HTMLDivElement>(null);
  const [displayedContent, setDisplayedContent] = useState("");
  const [isTypewriterActive, setIsTypewriterActive] = useState(false);
  
  // „Éó„É≠„Ç∞„É¨„ÉÉ„Ç∑„Éñ„Éá„Éº„Çø„Å∏„ÅÆÂÆâÂÖ®„Å™„Ç¢„ÇØ„Çª„Çπ
  const progressiveData = (message as any).metadata?.progressiveData || message;
  const stages = progressiveData.stages || {};
  const currentStage = progressiveData.currentStage || 'reflex';
  const ui = progressiveData.ui || { showIndicator: true, isUpdating: false, glowIntensity: 'none', highlightChanges: false };
  
  // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
  console.log('üìä ProgressiveMessageBubble render:', {
    currentStage: currentStage,
    hasReflex: !!stages?.reflex?.content,
    hasContext: !!stages?.context?.content,
    hasIntelligence: !!stages?.intelligence?.content,
    showIndicator: ui?.showIndicator,
    displayedContent: displayedContent?.substring(0, 50),
    stages: stages,
    messageContent: message.content?.substring(0, 50),
    fullMessage: message, // ÂÖ®‰Ωì„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇÇÁ¢∫Ë™ç
    stagesType: typeof stages,
    stagesKeys: stages ? Object.keys(stages) : []
  });

  // „Çπ„ÉÜ„Éº„Ç∏Ë°®Á§∫„Éò„É´„Éë„Éº
  const getStageLabel = (stage: string) => {
    switch (stage) {
      case "reflex":
        return "Áõ¥ÊÑü";
      case "context":
        return "ÊñáËÑà ‚ù§Ô∏è";
      case "intelligence":
        return "Áü•ÊÄß";
      default:
        return stage;
    }
  };

  // „Çπ„ÉÜ„Éº„Ç∏Ë©≥Á¥∞Ë™¨Êòé„Éò„É´„Éë„Éº  
  const getStageDescription = (stage: string) => {
    switch (stage) {
      case "reflex":
        return "Áû¨ÈñìÁöÑ„Å™ÂèçÂøú„Å®ÁêÜËß£";
      case "context":
        return "ÂøÉ„ÅÆÂ£∞„ÉªÂÜÖÈù¢„ÅÆÊÉ≥„ÅÑ";
      case "intelligence":
        return "Ê∑±„ÅÑÊ¥ûÂØü„Å®Áü•Ë≠ò";
      default:
        return "";
    }
  };

  const getStageColor = (stage: string, isActive: boolean) => {
    if (isActive) {
      switch (stage) {
        case "reflex":
          return "bg-green-500 shadow-lg shadow-green-500/50";
        case "context":
          return "bg-pink-500 shadow-lg shadow-pink-500/50 animate-pulse";
        case "intelligence":
          return "bg-purple-500 shadow-lg shadow-purple-500/50";
        default:
          return "bg-gray-500";
      }
    }
    return "bg-gray-600";
  };

  const handleRegenerate = async () => {
    const { regenerateLastMessage } = useAppStore.getState();
    await regenerateLastMessage();
  };

  const handleContinue = async () => {
    const { continueGeneration } = useAppStore.getState();
    await continueGeneration();
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(message.content);
  };

  // ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Ç∏„Å´Âøú„Åò„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæóÔºàÊÆµÈöéÁöÑË°®Á§∫Ôºâ
  const getCurrentStageContent = () => {
    // message.content„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„ÇíÂÑ™ÂÖàÁöÑ„Å´‰ΩøÁî®
    // Ôºà„Çµ„Éº„Éê„ÉºÂÅ¥„Åß„ÇÇmessage.content„Å´ÊúÄÊñ∞„ÅÆÂÜÖÂÆπ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅÔºâ
    if (message.content) {
      console.log('‚úÖ Using message.content:', message.content.substring(0, 50));
      return message.content;
    }
    
    // stages„Åå„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    if (!stages || typeof stages !== 'object') {
      console.log('‚ö†Ô∏è No stages object and no content');
      return '';
    }
    
    let content = '';
    
    // Áõ¥ÊÑüÊÆµÈöé„ÅÆÂÜÖÂÆπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (stages.reflex?.content) {
      content = stages.reflex.content;
      console.log('‚úÖ Using reflex content from stages:', content.substring(0, 50));
    }
    
    // ÊñáËÑàÊÆµÈöé„Å´ÈÄ≤„Çì„Åß„ÅÑ„ÇãÂ†¥Âêà„ÄÅÊñáËÑà„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫
    if ((currentStage === 'context' || currentStage === 'intelligence') && 
        stages.context?.content) {
      content = stages.context.content;
      console.log('‚úÖ Using context content from stages:', content.substring(0, 50));
    }
    
    // Áü•ÊÄßÊÆµÈöé„Å´ÈÄ≤„Çì„Åß„ÅÑ„ÇãÂ†¥Âêà„ÄÅÁü•ÊÄß„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫
    if (currentStage === 'intelligence' && stages.intelligence?.content) {
      content = stages.intelligence.content;
      console.log('‚úÖ Using intelligence content from stages:', content.substring(0, 50));
    }
    
    return content || '';
  };

  // „Çø„Ç§„Éó„É©„Ç§„Çø„ÉºÂäπÊûú„ÅÆÂÆüË£Ö
  useEffect(() => {
    const currentContent = getCurrentStageContent();
    
    if (effectSettings.typewriterEffect && currentContent) {
      setIsTypewriterActive(true);
      setDisplayedContent("");
      
      const speed = Math.max(10, 100 - effectSettings.typewriterIntensity);
      // „Çø„Ç§„Éó„É©„Ç§„Çø„ÉºÂäπÊûú„ÇíÊ≠£„Åó„ÅÑË¶ÅÁ¥†„Å´ÈÅ©Áî®
      const typewriterElement = contentRef.current?.querySelector('.typewriter-target');
      if (typewriterElement instanceof HTMLElement) {
        messageTransitionService.typewriterEffect(
          typewriterElement,
          currentContent,
          speed
        ).finally(() => {
          setIsTypewriterActive(false);
          setDisplayedContent(currentContent);
        });
      } else {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Áõ¥Êé•Ë°®Á§∫
        setIsTypewriterActive(false);
        setDisplayedContent(currentContent);
      }
    } else {
      setDisplayedContent(currentContent);
    }
  }, [message.content, currentStage, stages, effectSettings.typewriterEffect, effectSettings.typewriterIntensity]);

  const canRegenerate = isLatest && !is_generating;
  const canContinue = isLatest && !is_generating;

  return (
    <div className="progressive-message-bubble relative">
      <div className="progressive-container bg-slate-800/50 backdrop-blur-sm rounded-lg border border-purple-400/20 overflow-hidden">
        {/* „Çπ„ÉÜ„Éº„Ç∏„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
        {ui.showIndicator && (
          <div className="stage-indicator p-3 border-b border-purple-400/20">
            <div className="flex flex-wrap gap-4">
              {(["reflex", "context", "intelligence"] as const).map((stage, index) => (
                <div key={stage} className="stage-item flex items-center gap-2 min-w-0 flex-1">
                  <div className={`stage-icon w-3 h-3 rounded-full transition-all duration-300 ${
                    getStageColor(stage, currentStage === stage)
                  }`} />
                  <div className="stage-info flex flex-col min-w-0">
                    <span className="stage-label text-sm font-medium text-gray-300">
                      {getStageLabel(stage)}
                    </span>
                    <span className="stage-description text-xs text-gray-500 truncate">
                      {stages[stage]?.content ? (
                        <span className="text-green-400 font-medium">ÂÆå‰∫Ü</span>
                      ) : currentStage === stage ? (
                        <span className="text-yellow-400 font-medium animate-pulse">Âá¶ÁêÜ‰∏≠...</span>
                      ) : (
                        <span className="text-gray-500">ÂæÖÊ©ü‰∏≠</span>
                      )}
                    </span>
                  </div>
                  {index < 2 && (
                    <div className="stage-separator w-8 h-0.5 bg-gray-600 mx-2 flex-shrink-0" />
                  )}
                </div>
              ))}
            </div>
            
            {/* Show Diff „Éà„Ç∞„É´ */}
            {stages.context?.content && stages.reflex?.content && (
              <div className="mt-3 flex items-center gap-2">
                <button
                  onClick={() => setShowDiff(!showDiff)}
                  className={`px-3 py-1 text-xs rounded-lg transition-all ${
                    showDiff 
                      ? 'bg-purple-500 text-white' 
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  {showDiff ? '‚úì Show Diff' : 'Show Diff'}
                </button>
                <span className="text-xs text-gray-500">„Çπ„ÉÜ„Éº„Ç∏Èñì„ÅÆÂ∑ÆÂàÜ„ÇíË°®Á§∫</span>
              </div>
            )}
          </div>
        )}

        {/* „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫„Ç®„É™„Ç¢ */}
        <div className="message-area p-4 relative">
          {/* „É°„ÉÉ„Çª„Éº„Ç∏„Éê„Éñ„É´ */}
          <div
            ref={contentRef}
            className={`message-content px-4 py-3 rounded-2xl shadow-lg backdrop-blur-sm transition-all duration-200 relative overflow-hidden ${
              ui.highlightChanges ? "highlight-changes" : ""
            } ${
              effectSettings.colorfulBubbles 
                ? "bg-gradient-to-br from-purple-500/20 via-blue-500/20 to-teal-500/20 border-purple-400/40 shadow-purple-500/20" 
                : "bg-slate-800/60 border-slate-600/30"
            }`}
            style={{
              fontSize: effectSettings.fontEffects ? 
                `${Math.max(0.75, 1 + (effectSettings.fontEffectsIntensity - 50) / 100)}rem` : 
                undefined,
              fontWeight: effectSettings.fontEffects && effectSettings.fontEffectsIntensity > 70 ? 
                "bold" : 
                undefined,
              textShadow: effectSettings.fontEffects && effectSettings.fontEffectsIntensity > 50 ? 
                "0 0 10px rgba(255,255,255,0.3)" : 
                undefined
            }}
          >
            {/* „É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ */}
            <div className="message-text prose prose-sm prose-invert max-w-none">
              {effectSettings.typewriterEffect && isTypewriterActive ? (
                <div className="relative">
                  <div className="typewriter-target prose prose-sm prose-invert max-w-none" />
                  <span className="typewriter-cursor animate-pulse ml-1 text-purple-400">|</span>
                </div>
              ) : displayedContent ? (
                <ReactMarkdown
                  remarkPlugins={[remarkGfm]}
                  components={{
                    p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
                  }}
                >
                  {displayedContent}
                </ReactMarkdown>
              ) : (
                <div className="text-gray-400 italic">
                  {currentStage === "reflex" && "Áõ¥ÊÑü„Çπ„ÉÜ„Éº„Ç∏„ÇíÂá¶ÁêÜ‰∏≠..."}
                  {currentStage === "context" && "ÊñáËÑà„Çπ„ÉÜ„Éº„Ç∏„ÇíÂá¶ÁêÜ‰∏≠..."}
                  {currentStage === "intelligence" && "Áü•ÊÄß„Çπ„ÉÜ„Éº„Ç∏„ÇíÂá¶ÁêÜ‰∏≠..."}
                </div>
              )}
            </div>

            {/* „É°„ÉÉ„Çª„Éº„Ç∏„É°„Éã„É•„Éº - Â∏∏„Å´ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„Å´Ë°®Á§∫ */}
            {isLatest && (
                <div
                  ref={menuRef}
                  className="message-menu absolute top-2 right-2 flex items-center gap-1 bg-gray-800/90 backdrop-blur-sm rounded-lg p-1 shadow-lg border border-gray-600/30 z-10"
                >
                  {/* ÂÜçÁîüÊàê„Éú„Çø„É≥ */}
                  {canRegenerate && (
                    <button
                      onClick={handleRegenerate}
                      className="p-1.5 rounded hover:bg-gray-700 transition-colors text-gray-300 hover:text-white"
                      title="ÂÜçÁîüÊàê"
                    >
                      <RotateCcw className="w-4 h-4" />
                    </button>
                  )}
                  {/* Á∂ö„Åç„Éú„Çø„É≥ */}
                  {canContinue && (
                    <button
                      onClick={handleContinue}
                      className="p-1.5 rounded hover:bg-gray-700 transition-colors text-gray-300 hover:text-white"
                      title="Á∂ö„Åç„ÇíÁîüÊàê"
                    >
                      <Play className="w-4 h-4" />
                    </button>
                  )}
                  {/* „Ç≥„Éî„Éº„Éú„Çø„É≥ */}
                  <button
                    onClick={handleCopy}
                    className="p-1.5 rounded hover:bg-gray-700 transition-colors text-gray-300 hover:text-white"
                    title="„Ç≥„Éî„Éº"
                  >
                    <Copy className="w-4 h-4" />
                  </button>
                  {/* „Åù„ÅÆ‰ªñ„É°„Éã„É•„Éº */}
                  <button
                    onClick={() => setShowFullActions(!showFullActions)}
                    className="p-1.5 rounded hover:bg-gray-700 transition-colors text-gray-300 hover:text-white"
                    title="„Åù„ÅÆ‰ªñ"
                  >
                    <MoreHorizontal className="w-4 h-4" />
                  </button>
                </div>
            )}

            {/* „Ç®„Éï„Çß„ÇØ„ÉàÁµ±Âêà */}
            {effectSettings.particleEffects && (
              <Suspense fallback={null}>
                <ParticleText text={displayedContent} trigger={isLatest && !isTypewriterActive} />
              </Suspense>
            )}

            {(effectSettings.particleEffects || effectSettings.colorfulBubbles) && (
              <Suspense fallback={null}>
                <MessageEffects
                  trigger={displayedContent}
                  position={{ x: 50, y: 50 }}
                />
              </Suspense>
            )}
          </div>
          
          {/* DiffË°®Á§∫„Ç®„É™„Ç¢ */}
          {showDiff && stages.context?.content && stages.reflex?.content && (
            <div className="diff-display mt-4 p-3 bg-gray-900/50 rounded-lg border border-gray-700">
              <div className="text-xs font-medium text-gray-400 mb-2">„Çπ„ÉÜ„Éº„Ç∏Èñì„ÅÆÂ§âÂåñ</div>
              <div className="space-y-3">
                {/* Áõ¥ÊÑü ‚Üí ÊñáËÑà */}
                <div className="diff-section">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-xs text-green-400">Áõ¥ÊÑü</span>
                    <span className="text-xs text-gray-500">‚Üí</span>
                    <span className="text-xs text-pink-400">ÊñáËÑà</span>
                  </div>
                  <div className="text-xs text-gray-300 bg-gray-800/50 p-2 rounded">
                    {stages.context.content.length > stages.reflex.content.length 
                      ? `+${stages.context.content.length - stages.reflex.content.length} ÊñáÂ≠óËøΩÂä†`
                      : 'ÂÜÖÂÆπ„ÇíË™øÊï¥'}
                  </div>
                </div>
                
                {/* ÊñáËÑà ‚Üí Áü•ÊÄß */}
                {stages.intelligence?.content && (
                  <div className="diff-section">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-xs text-pink-400">ÊñáËÑà</span>
                      <span className="text-xs text-gray-500">‚Üí</span>
                      <span className="text-xs text-purple-400">Áü•ÊÄß</span>
                    </div>
                    <div className="text-xs text-gray-300 bg-gray-800/50 p-2 rounded">
                      {stages.intelligence.content.length > stages.context.content.length 
                        ? `+${stages.intelligence.content.length - stages.context.content.length} ÊñáÂ≠óËøΩÂä†`
                        : 'ÂÜÖÂÆπ„ÇíÊ¥óÁ∑¥'}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* „É°„Çø„Éá„Éº„ÇøË°®Á§∫ÔºàÈñãÁô∫„É¢„Éº„ÉâÔºâ - Êäò„Çä„Åü„Åü„ÅøÂèØËÉΩ */}
        {process.env.NODE_ENV === "development" && message.metadata && (
          <div className="metadata mt-3 bg-gray-900/50 backdrop-blur-sm rounded-lg border border-gray-700 text-xs">
            <div 
              className="flex items-center justify-between p-2 cursor-pointer hover:bg-gray-800/50 transition-colors"
              onClick={() => setShowMetadata(!showMetadata)}
            >
              <div className="flex items-center gap-2 text-gray-300">
                <span className="text-xs">„É°„Çø„Éá„Éº„Çø</span>
                <div className="flex items-center gap-1 text-xs text-gray-500">
                  <span>{message.metadata.totalTime}ms</span>
                  <span>‚Ä¢</span>
                  <span>{message.metadata.totalTokens}„Éà„Éº„ÇØ„É≥</span>
                </div>
              </div>
              <div className="flex items-center gap-1 text-gray-500">
                <span className="text-xs">Ë©≥Á¥∞</span>
                <div className={`transition-transform duration-200 ${showMetadata ? "rotate-180" : ""}`}>
                  ‚Ä¢‚Ä¢‚Ä¢
                </div>
              </div>
            </div>
            
            {/* Ë©≥Á¥∞„É°„Çø„Éá„Éº„ÇøÔºàÊäò„Çä„Åü„Åü„ÅøÂèØËÉΩÔºâ */}
            {showMetadata && (
              <div className="p-3 border-t border-gray-700">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3 text-gray-300">
                  <div className="stat-item">
                    <span className="label">Á∑èÁîüÊàêÊôÇÈñì:</span>
                    <span className="value">{message.metadata.totalTime}ms</span>
                  </div>
                  <div className="stat-item">
                    <span className="label">Á∑è„Éà„Éº„ÇØ„É≥:</span>
                    <span className="value">{message.metadata.totalTokens}„Éà„Éº„ÇØ„É≥</span>
                  </div>
                  {message.metadata.userSatisfactionPoint && (
                    <div className="stat-item">
                      <span className="label">Ê∫ÄË∂≥Â∫¶„Éù„Ç§„É≥„Éà:</span>
                      <span className="value">{message.metadata.userSatisfactionPoint}</span>
                    </div>
                  )}
                </div>
                {message.metadata.stageTimings && (
                  <div className="mt-3 pt-3 border-t border-gray-700">
                    <span className="label text-gray-400">„Çπ„ÉÜ„Éº„Ç∏„Çø„Ç§„Éü„É≥„Ç∞:</span>
                    <div className="stage-timings grid grid-cols-3 gap-2 mt-1 text-xs">
                      {message.metadata.stageTimings.reflex && (
                        <div>Áõ¥ÊÑü: {message.metadata.stageTimings.reflex}ms</div>
                      )}
                      {message.metadata.stageTimings.context && (
                        <div>ÊñáËÑà: {message.metadata.stageTimings.context}ms</div>
                      )}
                      {message.metadata.stageTimings.intelligence && (
                        <div>Áü•ÊÄß: {message.metadata.stageTimings.intelligence}ms</div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* ÁîüÊàê‰∏≠„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
      {ui.isUpdating && (
        <div className="updating-indicator absolute bottom-4 left-1/2 transform -translate-x-1/2 flex items-center gap-2 bg-purple-500/20 backdrop-blur-sm px-4 py-2 rounded-full">
          <div className="flex gap-1">
            {[0, 1, 2].map((i) => (
              <div
                key={i}
                className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"
                style={{ animationDelay: `${i * 200}ms` }}
              />
            ))}
          </div>
          <span className="text-sm text-gray-400">
            {currentStage === "reflex" && "Ë®òÊÜ∂„ÇíÊ§úÁ¥¢‰∏≠..."}
            {currentStage === "context" && "ÂøÉ„ÅÆÂ£∞„ÇíÁ¥°„ÅÑ„Åß„ÅÑ„Çã... üí≠"}
            {currentStage === "intelligence" && "ÊúÄÁµÇË™øÊï¥‰∏≠..."}
          </span>
        </div>
      )}
    </div>
  );
};

export default ProgressiveMessageBubble;